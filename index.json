[{"content":"git体系 # 由上图可以看出，git主要由两部分组成，一个是远端仓库，一个是本地仓库。 本地仓库又由一下几个部分组成：\n工作区：就是我们平时写代码的地方，比如我最常用的就是vscode 暂存区：我们运行git add命令时，代码就会被推到暂存区，起到一个缓存的作用，同时也能帮Git在做diff的时候提高查找性能 本地分支：运行git commit命令后，代码就被提交到本地分支上了，可以在本地.git目录下的refs/heads目录中查看到本地的分支代码信息 远端分支本地副本：执行pull、fetch、push指令时都会往这里更新，它是远程仓库各分支数据在本地的一个副本，.git文件下的refs/remotes目录可以查看到具体信息 git工作流程 # 日常工作中，我们常用流程大概是这样： 在github上建一个新的远程库，或者远程库中已经有数据了\ngit init # 这时本地还没有库，我们先用git init命令初始化一个git仓库 现在远程、本地都有仓库了，但是二者没有任何关联，将他们联系起来有两种情况\ngit remote # 如果远程仓库是新建的，没有任何数据，我们需要使用git remote add origin xxx.git添加一个远程版本库到本地， 相应的git remote rm命令是删除远程版本库关联。 然后使用git push -u origin master把当前仓库的master分支和远端仓库的master分支关联起来，这样后续我们push或者pull的时候就可以直接输git push/pull，而不是git push\\pull origin master。\ngit push后面的-u是什么意思 # 给git push加一个-u参数，其实就相当于给本地分支定义一个上游分支，让git知道当前操作的是哪条分支。 相当于同时执行了git push origin master和git branch --set-upstream master origin/master 如果一开始没有代入这个参数，直接运行git pull指令时，会出现以下报错 大概意思是没找到当前分支\ngit clone # 如果远程库已经有数据了，可以直接在本地库使用git clone xxx.git命令将远程库克隆到本地 这时我们默认是在master分支上 当我们在上面的命令行后添加参数git clone xxx.git -b branch时，会自动给我切换到branch分支上\ngit branch # 关于分支的操作有这些：\ngit branch：查看本地所有分支信息 git branch -r：查看远程仓库所有分支 git branch -a：查看本地和远程仓库所有分支 git checkout # 如果我们想以当前分支为基准创建一个新的本地分支并切换过去，可以使用git checkout -b branch1命令， 它其实是两个命令合并而成的：git branch branch1创建分支，git checkout branch1切换到该分支上。\ngit add # 当我们在工作区吭哧吭哧敲完代码，根据流程，我们得先把代码添加到暂存区，就需要用到git add命令了\n我们可以一个一个文件添加到暂存区：git add [filename1] [filename2] ... 或者把当前目录下所有文件改动都一口气添加到暂存区：git add . 又或者直接把仓库里所有文件改动都添加到暂存区：git add -A git commit # 然后我们就需要把代码推到本地分支上去了：git commit [filename1] ... -m [mesaage] 这个命令有两个参数：\n-m：后面跟的是本次提交的相关信息，可以简单地描述一下本次提交代码做了哪些改动，添加了什么功能 -a：对于已经被commit提交过的代码，这个命令相当于执行了git add -A，不需要另外再add一遍了； 对于没有被提交过的文件，还是需要add后才能被commit到本地分支上去 一般工作中更多的是使用git commit -m 'do sth'这个命令，也可以使用git commit -am命令，相当于同时执行了git add和git commit。\ngit push # 接下来就要正是把代码推送到远程仓库里去了。 如果我们至始至终都在master分支上工作，并且之前初始化本地仓库时运行了git push -u origin master命令，现在只需要输入git push指令就ok了。 如果我们是要将本地创建的分支推送到远端，就需要使用git push --set-upstream origin branch1将分支推上去并关联起来。 有没有觉得这行代码很熟悉？上面git pull的报错图推荐的指令是git branch --set-upstream-to=origin/\u0026lt;branch\u0026gt; test，就是将本地分支和远程分支关联起来。 如果远程仓库中已经有了这个分支时，本地代码没有和远程代码冲突的情况下会直接将本地改动提交上去； 如果出现冲突，就会提示你先把远端分支中的代码pull下来解决冲突，然后再推上去。\ngit pull # 当本地分支和远端分支已经建立联系了，我们只需要git pull就能把代码拉到本地，但如果出现上面的情况， 两端没能建立联系，就需要使用git pull origin branch1拉取指定的远端分支到本地分支。 冲突解决后再运行git push --set-upstream origin branch1。\n","date":"16 十月 2022","permalink":"/posts/git/","section":"Posts","summary":"git体系 # 由上图可以看出，git主要由两部分组成，一个是远端仓库，一个是本地仓库。 本地仓库又由一下几个部分组成：","title":"Git查漏补缺"},{"content":"","date":"16 十月 2022","permalink":"/","section":"HeleneWoods","summary":"","title":"HeleneWoods"},{"content":"","date":"16 十月 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"为什么选择Hugo # Hugo是由Go语言实现的，无需搭建复杂的运行环境，几行命令行就能快速生产一个静态网站。 官网提供了多种风格的免费主题，还有优秀网站展示，满足了个人的自定义需求。\n如何搭建 # 就像前面所说，只需要几行命令行就能够搭建出一个属于自己的博客。\n安装Hugo # 首先得安装Hugo(git下载)。 Mac可直接使用brew install hugo安装。 windows系统安装完Hugo后需要配置环境变量，在命令行中输入hugo version来测试是否安装成功。\n生成站点 # 输入命令行\nhugo new [网站名称] [本地存放目录地址] 就可在你想要的目录中生成网站文件。\n创建文章 # hugo new post/first.md 输入以上命令行就可在post目录下生成一个名为first的markdown格式文件。 打开文件大概长这样：\n--- date: \u0026#34;2015-10-25T08:36:54-07:00\u0026#34; title: \u0026#34;first\u0026#34; draft: true ## draft为true表示当前文章是草稿 --- ###文章正文在这 设置主题 # 在官网提供的主题中选择自己心仪的主题，一般点进主题页都会有下载和配置文档，万变不离其宗。 当前我使用的主题叫congo，使用的是git submodule方式下载的：\ncd [网站文件根目录] git init git submodule add -b stable https://github.com/jpanther/congo.git themes/congo 命令行中的地址是主题在git上的地址，后面跟着的是主题存放目录和主题文件名。 当然还有其它的下载方式，可以参考congo文档。\n本地运行 # 然后我们就可以本地启动服务进行调试了：\nhugo server --theme=congo --buildDrafts theme=congo是设置主题，buildDrafts是指生成草稿，还记得前面文章中有个参数draft: true吗？如果没有这个命令，是看不到草稿文章的，需要将draft设为false才能显示在博客上。 然后就可以在浏览器打开http://localhost:1313预览本地博客了。\n部署到服务器 # 作为一个程序员，能免费的东西绝不花钱。这里我们就能用github提供的免费服务器来部署我们的博客，首先得在github上建一个新的库，库的名称设为[github用户名(全小写)].github.io.git。 在网站存放的根目录执行命令：\nhugo --theme=congo --baseUrl=\u0026#34;https://[github用户名(全小写)].github.io/\u0026#34; 后面的地址就是访问在线博客的地址。 命令行运行后，根目录下会有个public文件夹，把这个文件夹里的内容推到刚刚创建的github库里就完成部署了。\ncd public git init git remote add origin [github库的完整地址] git add -. git commit -m \u0026#39;fist commit\u0026#39; git push -u origin master ","date":"15 十月 2022","permalink":"/posts/first-blog/","section":"Posts","summary":"为什么选择Hugo # Hugo是由Go语言实现的，无需搭建复杂的运行环境，几行命令行就能快速生产一个静态网站。 官网提供了多种风格的免费主题，还有优秀网站展示，满足了个人的自定义需求。","title":"关于个人博客的建成"},{"content":"","date":"15 十月 2022","permalink":"/about/","section":"HeleneWoods","summary":"","title":"关于我"},{"content":"","date":"1 一月 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 一月 0001","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]